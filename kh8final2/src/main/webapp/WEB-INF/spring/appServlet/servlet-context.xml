<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	Spring에서 사용자 요청을 모두 처리하는 DispatcherServlet이 알아야 하는 설정
	(DispatcherServlet에게 부탁하는 내용들이 적혀있는 문서)
	
	= 사용자가 OOO 과 같은 요청을 보낸다면 OOO 으로 처리해주세요!
	= 요청과 관련된 설정이 이곳에 작성됨
 -->
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 
		View Resolver 설정
		= 컨트롤러에서 업무 수행 후 JSP와 연결할 때 작성하는 주소를 간소화 하는 역할의 도구
		= 접두사 접미사를 제외하고 주소를 설정하면 자동으로 완성
	 -->	 
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 
		Component Scan 설정
		= 자동으로 구성요소들을 탐색하는 설정
		= 특정 지점(base-package)을 설정하여 해당 지점에 있는 모든 요소를 탐색하여 등록한다
		= spring-context 모듈의 설정
		= 제외하고 싶은 내용은 exclude-filter, 추가하고 싶은 내용만 include=filter를 사용한다.
		= 어노테이션 설정이 된 파일들을 탐색하여 자동으로 이 파일에 등록 처리
		= @Controller, @RestController, @Service, @Component, @Repository, ...
		= annotation-driven 설정을 해야 annotation이 활성화된다.
	 -->
	<mvc:annotation-driven></mvc:annotation-driven> 
	<context:component-scan base-package="com.kh.zipggu" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 
		컨트롤러를 특정 주소와 연결(mapping)
		= 스프링은 등록하는 도구들을 모두 bean이라고 부른다.
		= 도구를 등록한다는 것은 bean을 등록한다는 것이다.
		= name은 주소, class는 일할 controller 를 작성 
	
	 	/hello 라는 주소로 접속하면 HelloController가 일을 할 수 있도록 해주세요!
	  	<bean name="/hello" class="com.kh.spring04.HelloController"></bean>
	-->
	 
	 <!-- 
		DispatcherServlet에서 처리하지 말아야 할 요청을 설정
		= 이미지, 음악, CSS, JS 파일 등은 정적 파일이므로 굳이 컨트롤러를 거칠 필요가 없음
		= location은 실제 위치를 지정하고 mapping은 주소의 패턴을 지정한다
		= 원하는 주소를 특정 위치로 연결할 수 있다.
	  -->
	  <mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	  	  
	 <!-- 
	 	파일 업로드 방식 요청을 처리할 수 있는 도구를 등록
	 	= id를 반드시 multipartResolver라고 작성해야 한다
	 	= 파일을 먼저 저장하지 않고 사용자가 저장 여부를 선택할 수 있도록 처리해준다
	  -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8"></property>
	 	<property name="maxUploadSizePerFile" value="100000000"></property>
	 	<property name="maxUploadSize" value="10000000000"></property>
	 </bean>
	 
	 <!-- 
		인터셉터(Interceptor) 등록
		= mvc:mapping에 가로챌 주소를 지정(여러 개 작성 가능)
		= mvc:exclude-mapping에 제외할 주소를 지정(여러 개 작성 가능)
		= bean에 처리할 인터셉터 클래스 객체를 지정
		= Spring 표현식을 사용하여 주소 패턴을 지정(*, **)
	 	TestInterceptor에 대한 등록 처리
	 <mvc:interceptors>
	 	<mvc:interceptor>
	 		<mvc:mapping path="member/**"/>
	 		<mvc:mapping path="/member/join"/>
	 		<mvc:mapping path="/member/login"/>
	 		<mvc:mapping path="/member/page"/>
	 		<bean class="com.kh.zipggu.interceptor.MemberInterceptor"></bean>
	 	</mvc:interceptor>
	 </mvc:interceptors>
	 -->
	
		<mvc:interceptors>
	 	<mvc:interceptor>
	 		<mvc:mapping path="/member/join"/>
	 		<mvc:mapping path="/member/login"/>
	 		<bean class="com.kh.zipggu.interceptor.LoginInterceptor"></bean>
	 	</mvc:interceptor>
	 </mvc:interceptors>
	
	
	<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
	<bean id="naverLoginBO" class="com.kh.zipggu.naver.NaverLoginBO" />	
	
	 
</beans>








