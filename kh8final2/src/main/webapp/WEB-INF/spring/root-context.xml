<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	스프링 전역 설정 파일
	- 모든 스프링 요소에서 알아야 하는 공용 도구들을 이곳에 등록
	- 모든 스프링 요소에서 알아야 하는 공용 설정들을 이곳에 작성
	- 필요로 하는 namespace가 있다면 하단의 namespace 탭에서 추가 가능
 -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 
		미리 만들어둔 properties 들을 등록하여 이 설정파일에서 사용할 수 있도록 구현
		= 경로와 관련된 모듈을 필요(spring-context)
		= 사용은 EL로 한다(SpringEL)
	 -->
	
	<context:property-placeholder location="classpath:/properties/**/*.properties"/>
	<!-- 
		필터에서 사용할 도구들을 전역설정파일에 등록
		= @Service, @Repository, @Component, @Aspect
		= 자동 스캔모드를 제거하고 수동으로 지정하여 스캔
	 -->
	<mvc:annotation-driven></mvc:annotation-driven> 
	<context:component-scan base-package="com.kh.zipggu" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>	 
	
	<!-- 
		데이터베이스 관련 도구 등록
		= DriverManagerDataSource : 일반 연결 생성 도구
		= BasicDataSource : DBCP 연결 생성 도구
		= JdbcTemplate : 명령 실행 도구
		= SqlSessionFactory : 스프링에서 마이바티스 중앙 제어장치(SqlSessionFactory)를 쓸 수 있게 하는 bean
		= SqlSessionTemplate : 스프링에서 구문 실행 장치(SqlSession)를 쓸 수 있게 하는 bean
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>
	
	<bean id="dbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
		
		<property name="maxTotal" value="${database.maxTotal}"></property>
		<property name="maxIdle" value="${database.maxIdle}"></property>
		<property name="minIdle" value="${database.minIdle}"></property>
		<property name="maxWaitMillis" value="${database.maxWaitMillis}"></property>
	</bean>
	 
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<!-- database 연결 도구를 주입(DI)한다 -->
	 	<property name="dataSource" ref="dbcpSource"></property>
	 </bean>
	 
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- 데이터베이스 연결 방식을 지정 -->
	 	<property name="dataSource" ref="dbcpSource"></property>
	 	<!-- 
	 		중앙 설정 파일 경로를 지정
	 		= classpath : src의 최상위부터 시작하는 경로
	 		= filepath : 프로젝트의 최상위부터 시작하는 경로
	 	 -->
	 	<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
	 	<!--
	 		매퍼 파일 경로를 지정
	 		= 와일드카드를 2개 연속 사용하면 해당 경로 내부 어디든 관계없다는 의미
	 		= 와일드카드를 1개 사용하면 바로 하위 폴더 또는 텍스트를 의미
	 	 -->
	 	<property name="mapperLocations" value="classpath:/mybatis/mapper/**/*-mapper.xml"></property>
	 </bean>
	 
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	 	<!-- 마이바티스 중앙 제어 장치 정보를 "반드시" 가져야 하도록 설정(생성자) -->
	 	<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	 </bean>

	 <!-- 
	  	암호화를 위한 Encoder 등록
	  -->
	 <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<!-- 
		사용할 필터를 bean으로 전체 설정에 등록
		
		1. 직접 등록
	 		<bean id="springFilter" class="com.kh.spring00.filter.SpringFilter"></bean>
		2. @Service 또는 @Component로 등록
	 -->
	 
	<!-- 
		이메일 전송 도구 
	-->
	<bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}"></property>
		<property name="port" value="${email.port}"></property>
		<property name="username" value="${email.username}"></property>
		<property name="password" value="${email.password}"></property>
		
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.debug">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
				<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
			</props>
		</property>
	</bean>
	
	<!-- 
		Task 관련 설정 
		- namespace에 task를 추가
		- annotation-driven 태그를 작성하여 관련 어노테이션을 활성화
	-->
	<task:annotation-driven/>
</beans>