<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 등록용 시퀀스번호 -->
	<select id="seq" resultType="int">
		select member_seq.nextval from dual
	</select>

	<!-- 조회 -->
	<select id="VOlist" resultType="MemberListVO">
		select M.member_no, M.member_email, M.member_nickname, M.member_join, M.member_grade, M.member_point, M.member_introduce, M.member_type, P.member_profile_no from member M LEFT outer join member_profile P on M.member_no = P.member_no
	</select>

	<!-- 조회 -->
	<select id="list" resultType="MemberDto">
		select * from member
	</select>

	<!-- 단일조회 -->
	<select id="get" parameterType="String" resultType="MemberDto">
		select * from member where member_email = #{memberEmail}
	</select>
	
	<!-- 단일조회 -->
	<select id="noGet" parameterType="int" resultType="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>	
	
	<!-- 이메일 중복 조회 -->
	<select id="emailGet" resultType="MemberDto">
		select * from member where member_email = #{email}
	</select>
	
	<!-- 등록 -->
	<insert id="insert" parameterType="MemberDto">
		insert into member(
			member_no, member_email, member_pw, member_nickname
		)
		values(
			#{memberNo}, #{memberEmail}, #{memberPw}, #{memberNickname}
		)
	</insert>

<!-- 	<insert id="insert2" parameterType="MemberDto"> -->
<!-- 		insert into member -->
<!-- 		values( -->
<!-- 			#{memberId}, #{memberPw}, #{memberNick}, -->
<!-- 			#{memberBirth}, #{memberEmail}, #{memberPhone}, -->
<!-- 			sysdate, 100, '준회원' -->
<!-- 		) -->
<!-- 	</insert> -->

	<!-- 비밀번호 변경 -->
	<update id="changePassword" parameterType="map">
		update member set member_pw = #{changePw}
		where member_email = #{memberEmail}
	</update>

	<!-- 개인정보 변경 -->
	<update id="edit" parameterType="MemberDto">
		update member
<!-- 		set을 이용하여 수정항목을 동적으로 배치(단 마지막 콤마는 반드시 작성) -->
		<set>
			<if test="memberNickname != null">
				member_nickname = #{memberNickname},
			</if>
<!-- 			<if test="memberGender != null"> -->
<!-- 				member_gender = #{memberGender}, -->
<!-- 			</if> -->
<!-- 			<if test="memberBirth != null"> -->
<!-- 				member_birth = #{memberBirth}, -->
<!-- 			</if> -->
			<if test="memberIntroduce != null">
				member_introduce = #{memberIntroduce}
			</if>
		</set>
			where member_no = #{memberNo}
	</update>


<!-- 회원 탈퇴 -->
	<delete id="quit" parameterType="String">
		delete member where member_email = #{memberEmail}
	</delete>

</mapper>