<?xml version="1.0"  encoding="UTF-8"  ?>
<!-- 
	myBatis 매퍼 파일
	= DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	= namespace를 통해서 여러 개의 매퍼를 구분한다.
	= 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	= <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다.
	= 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	= parameterType은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	= resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE  mapper PUBLIC  "-//mybatis.org//DTD  Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">
	
	<!-- 리뷰 등록 기능 -->
	<insert id="insert" parameterType="reviewDto">
		insert into review values(
		
		#{reviewNo}, #{orderDetailNo}, 
		
		#{itemNo}, #{reviewPoint}, #{reviewDetail}
		
		)
	</insert>
	
	<!-- 시퀀스 먼저 받는 기능 -->
	<select id="sequence" resultType="int">
		
		select review_seq.nextval from dual 
		
	</select>	
	
	<!-- 해당 번호의 아이템에 리뷰 목록 출력 -->
	<select id="reviewList" parameterType="int" resultType="reviewListVO">
		select
		    R.review_no, R.review_detail, R.order_detail_no, R.review_point,
		    M.member_nickname, M.member_no,
		    D.item_no, D.order_quantity,
		    O.order_name
		from review R
		    inner join order_detail D  on R.order_detail_no = D.order_detail_no
		    inner join orders O on D.order_no = O.order_no
		    inner join member M on O.member_no = M.member_no
		where R.item_no = #{itemNo}
	</select>
	
	<update id="edit" parameterType="reviewInsertVO">
		update review set review_detail = #{reviewDetail}, review_point = #{reviewPoint} where review_no = #{reviewNo}
	</update>
	
	<delete id="delete" parameterType="int">
		delete review where review_no = #{reviewNo}
	</delete>
</mapper> 