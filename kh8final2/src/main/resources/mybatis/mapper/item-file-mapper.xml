<?xml version="1.0"  encoding="UTF-8"  ?>
<!-- 
	myBatis 매퍼 파일
	= DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	= namespace를 통해서 여러 개의 매퍼를 구분한다.
	= 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	= <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다.
	= 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	= parameterType은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	= resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE  mapper PUBLIC  "-//mybatis.org//DTD  Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="itemFile">
	
	<!-- 시퀀스 생성 -->
	<select id="getSeq" resultType="int">
		select item_file_seq.nextval from dual
	</select>
	
	<select id="get" parameterType="int" resultType="ItemFileDto">
		select * from item_file where item_file_no = #{itemFileNo}
	</select>
	
	<select id="getThumbnail" parameterType="int" resultType="ItemFileDto">
		select * from item_file where item_no = #{itemNo} and item_file_thumbnail = 1 and item_file_del = 'N'
	</select>
	
	<select id="listByItemNo" parameterType="int" resultType="ItemFileDto">
		select * from item_file where item_no = #{itemNo}
	</select>
	
	<select id="nonThumbnailListByItemNo" parameterType="int" resultType="ItemFileDto">
		select * from item_file 
		where item_no = #{itemNo} 
			and item_file_thumbnail = 0 
			and item_file_del = 'N' 
		order by item_file_no asc
	</select>
	
	<insert id="insert" parameterType="ItemFileDto">
		insert into item_file values(#{itemFileNo}, #{itemNo}, #{itemFileUploadname}, #{itemFileSavename}, #{itemFileSize}, #{itemFileType}, #{itemFileThumbnail}, 'N')
	</insert>
	
	<update id="updateFiles" parameterType="list">
		update item_file set item_file_del = 'Y' where item_file_no not in 
		<foreach collection="list" item="remainingFile" open="(" separator="," close=")">
			#{remainingFile}
		</foreach>
	</update>
	
</mapper> 