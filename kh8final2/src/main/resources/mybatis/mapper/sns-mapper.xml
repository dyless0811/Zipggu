<?xml version="1.0"  encoding="UTF-8"  ?>
<!-- 
	myBatis 매퍼 파일
	= DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	= namespace를 통해서 여러 개의 매퍼를 구분한다.
	= 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	= <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다.
	= 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	= parameterType은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	= resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE  mapper PUBLIC  "-//mybatis.org//DTD  Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sns">
	
	<!-- 첨부파일 등록 및 상세페이지 이동을 위해 시퀀값 먼저 받기 -->
	<select id="sequence" resultType="int">
		select sns_seq.nextval from dual
	</select>
	
	<!-- 게시글 등록 -->
	<insert id="write" parameterType="snsDto">
		insert into sns values(
			#{snsNo}, #{memberNo}, #{snsDetail}, sysdate, 0, 0
		)
	</insert>
	
	<!-- 게시글 상세페이지 조회  -->
	<select id="get" parameterType="int" resultType="snsListVO">
		select S.*, M.member_nickname from sns S left outer join member M on S.member_no = M.member_no where S.sns_no = #{snsNo}
	</select>
	
	<!-- 게시글 목록 -->
	<select id="listByPage" parameterType="map" resultType="snsListVO">
		select * from (
        	select rownum rn, TMP.* from (
            	select s.sns_no, s.member_no, s.sns_detail, s.sns_date, s.sns_count, s.sns_reply_count, m.member_nickname, 
            	count(l.sns_no) count from sns S left outer join member M on S.member_no = M.member_no left outer join sns_like l on s.sns_no = l.sns_no 
				group by s.sns_no, s.member_no, s.sns_detail, s.sns_date, s.sns_count, s.sns_reply_count, m.member_nickname 
				order by ${column} desc
        )TMP
    ) where rn between ${startRow} and ${endRow}
	</select>
	
	<!-- 게시글 수정 -->
	<update id="edit" parameterType="snsDto">
		update sns set sns_detail = #{snsDetail} where sns_no = #{snsNo}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="int">
		delete sns where sns_no = #{snsNo}
	</delete>
	
	<!-- 남의 글일 경우에만 조회수를 증가하는 기능 -->
	<update id="readUp" parameterType="map">
		update sns set sns_count = sns_count +1 where sns_no = #{snsNo}
		<if test="memberNo != null">
		and member_no != ${memberNo}
		</if>
	</update>


	<!-- 내가 팔로우 한사람들의 글 목록 -->
	<select id="followerList" parameterType="map" resultType="snsListVO">
		select * from (
	        	select rownum rn, TMP.* from (
	            	select 
                    s.*, m.member_nickname
                    from (select following_user from follow where follower_user = ${loginNo}) f inner join sns s on f.following_user = s.member_no
                    left outer join member m on s.member_no = m.member_no
	        )TMP
	    ) where rn between ${startRow} and ${endRow}
	</select>
	
	
	<!-- 내가 쓴 게시물 조회 -->
	<select id="myList" parameterType="map" resultType="snsDto">
		select * from (
	        	select rownum rn, TMP.* from (
	            	select * from sns where member_no = ${pageMember} order by sns_no desc
	        )TMP
	    ) where rn between ${startRow} and ${endRow}
	</select>
	
	<!-- 내가 좋아요한 게시물 조회 -->
	<select id="myLikeList" parameterType="map" resultType="snsListVO">
		select * from (
        	select rownum rn, TMP.* from (
            	select S.sns_no, S.sns_detail, S.sns_date, S.sns_count, S.sns_reply_count,S.member_no,
                        M.member_nickname
                from sns S
                    inner join sns_like L on S.sns_no = L.sns_no
                    inner join member M on L.member_no = M.member_no
                where L.member_no = ${memberNo} order by sns_no desc
	        )TMP
	    ) where rn between ${startRow} and ${endRow}
	</select>
</mapper> 